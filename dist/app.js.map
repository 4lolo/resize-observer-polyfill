{"version":3,"file":"app.js","sources":["../node_modules/resize-observer-polyfill/src/utils/geometry.js","../src/app.js","../node_modules/resize-observer-polyfill/src/shims/global.js","../node_modules/resize-observer-polyfill/src/shims/es6-collections.js","../node_modules/resize-observer-polyfill/src/utils/isBrowser.js","../node_modules/resize-observer-polyfill/src/shims/requestAnimationFrame.js","../node_modules/resize-observer-polyfill/src/utils/throttle.js","../node_modules/resize-observer-polyfill/src/ResizeObserverController.js","../node_modules/resize-observer-polyfill/src/utils/defineConfigurable.js","../node_modules/resize-observer-polyfill/src/ResizeObservation.js","../node_modules/resize-observer-polyfill/src/ResizeObserverEntry.js","../node_modules/resize-observer-polyfill/src/ResizeObserverSPI.js","../node_modules/resize-observer-polyfill/src/ResizeObserver.js","../node_modules/randomcolor/randomColor.js"],"sourcesContent":["import defineConfigurable from './defineConfigurable';\r\nimport isBrowser from './isBrowser';\r\n\r\n// Placeholder of an empty content rectangle.\r\nconst emptyRect = createRectInit(0, 0, 0, 0);\r\n\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles, ...positions) {\r\n    return positions.reduce((size, pos) => {\r\n        const value = styles['border-' + pos + '-width'];\r\n\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    const boxKeys = ['top', 'right', 'bottom', 'left'];\r\n    const paddings = {};\r\n\r\n    for (const key of boxKeys) {\r\n        const value = styles['padding-' + key];\r\n\r\n        paddings[key] = toFloat(value);\r\n    }\r\n\r\n    return paddings;\r\n}\r\n\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    const bbox = target.getBBox();\r\n\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    const {clientWidth, clientHeight} = target;\r\n\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n\r\n    const styles = getComputedStyle(target);\r\n    const paddings = getPaddings(styles);\r\n    const horizPad = paddings.left + paddings.right;\r\n    const vertPad = paddings.top + paddings.bottom;\r\n\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    let width = toFloat(styles.width),\r\n        height = toFloat(styles.height);\r\n\r\n    // Width & height include paddings and bord when 'border-box' box model is\r\n    // applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n\r\n    // Following steps can't applied to the document's root element as it's\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        const vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        const horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nconst isSVGGraphicsElement = (() => {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement === 'function') {\r\n        return target => target instanceof SVGGraphicsElement;\r\n    }\r\n\r\n    // If it's so, than check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method in the prototype chain.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return target => (\r\n        target instanceof SVGElement &&\r\n        typeof target.getBBox === 'function'\r\n    );\r\n})();\r\n\r\n/**\r\n * Checks whether provided element is a document element (root element of a document, i.e. <html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === document.documentElement;\r\n}\r\n\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nexport function getContentRect(target) {\r\n    // Return empty rectangle if running in a non-browser environment.\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n\r\n    return getHTMLElementContentRect(target);\r\n}\r\n\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nexport function createReadOnlyRect({x, y, width, height}) {\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    const Constr = typeof DOMRectReadOnly === 'function' ? DOMRectReadOnly : Object;\r\n    const rect = Object.create(Constr.prototype);\r\n\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x, y,\r\n        width, height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n\r\n    return rect;\r\n}\r\n\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nexport function createRectInit(x, y, width, height) {\r\n    return {x, y, width, height};\r\n}\r\n","// We need to use a polyfill itself here,\r\n// not its' possible native implementation.\r\nimport ResizeObserver from 'resize-observer-polyfill/src/ResizeObserver';\r\nimport randomColor from 'randomcolor';\r\n\r\nconst hues = [\r\n    'red',\r\n    'pink',\r\n    'blue',\r\n    'orange',\r\n    'purple',\r\n    'monochrome'\r\n];\r\n\r\nlet colorData = {\r\n    luminosity: 'light',\r\n    hue: hues[getRandomInt(0, 5)]\r\n};\r\n\r\nconst observer = new ResizeObserver(entries => {\r\n    for (const entry of entries) {\r\n        const rect = entry.contentRect;\r\n        const dimensionsStr = `${rect.width.toFixed(2)} x ${rect.height.toFixed(2)}`;\r\n\r\n        entry.target.firstElementChild.textContent = dimensionsStr;\r\n    }\r\n});\r\n\r\nlet index = 0;\r\nlet queue = [];\r\n\r\nfunction getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction updateColorData() {\r\n    colorData.hue = hues[getRandomInt(0, 5)];\r\n}\r\n\r\nfunction generateColor() {\r\n    return randomColor(colorData);\r\n}\r\n\r\nfunction toArray(collection) {\r\n    return Array.prototype.slice.call(collection);\r\n}\r\n\r\nfunction generateElements(container, levels, items = 4) {\r\n    let index = items;\r\n\r\n    levels--;\r\n\r\n    while (index--) {\r\n        let className = 'block';\r\n        const block = document.createElement('div');\r\n\r\n        if (levels) {\r\n            className += ' parent';\r\n\r\n            generateElements(block, levels, items);\r\n        } else {\r\n            className += ' leaf';\r\n\r\n            block.innerHTML = '<span class=\"dimen\"></span>';\r\n            block.style.backgroundColor = generateColor();\r\n        }\r\n\r\n        block.className = className;\r\n\r\n        container.appendChild(block);\r\n    }\r\n}\r\n\r\ngenerateElements(document.getElementById('container'), 2);\r\n\r\nconst blocks = document.querySelectorAll('.block');\r\n\r\nfunction populateQueue() {\r\n    index = 0;\r\n    queue = toArray(blocks);\r\n\r\n    updateColorData();\r\n\r\n    requestAnimationFrame(resolveNextItem);\r\n}\r\n\r\nfunction resolveNextItem() {\r\n    const block = queue.shift();\r\n\r\n    if (!block) {\r\n        setTimeout(populateQueue, 2500)\r\n\r\n        return;\r\n    }\r\n\r\n    if (!index || index === 2) {\r\n        block.style.maxWidth = getRandomInt(30, 50) + '%';\r\n\r\n        if (index === 2) {\r\n            block.style.minHeight = getRandomInt(0, 80) + '%';\r\n        }\r\n    }\r\n\r\n    if (~block.className.indexOf('leaf')) {\r\n        block.style.backgroundColor = generateColor();\r\n    }\r\n\r\n    if (++index === 4) {\r\n        index = 0;\r\n    }\r\n\r\n    requestAnimationFrame(resolveNextItem);\r\n}\r\n\r\n\r\nfor (const leaf of toArray(document.querySelectorAll('.leaf'))) {\r\n    observer.observe(leaf);\r\n}\r\n\r\nsetTimeout(populateQueue, 2000);\r\n","/**\r\n * Exports global object for the current environment.\r\n */\r\nexport default (function () {\r\n    if (typeof global != 'undefined' && global.Math === Math) {\r\n        return global;\r\n    }\r\n\r\n    if (typeof self != 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n\r\n    if (typeof window != 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\r\n","/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\nimport global from './global';\r\n\r\n/* eslint-disable require-jsdoc */\r\nexport const Map = (() => {\r\n    if (typeof global.Map === 'function') {\r\n        return global.Map;\r\n    }\r\n\r\n    function getIndex(arr, key) {\r\n        let result = -1;\r\n\r\n        arr.some((entry, index) => {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    return class {\r\n        constructor() {\r\n            this.__entries__ = [];\r\n        }\r\n\r\n        get size() {\r\n            return this.__entries__.length;\r\n        }\r\n\r\n        get(key) {\r\n            const index = getIndex(this.__entries__, key);\r\n            const entry = this.__entries__[index];\r\n\r\n            return entry && entry[1];\r\n        }\r\n\r\n        set(key, value) {\r\n            const index = getIndex(this.__entries__, key);\r\n\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            } else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        }\r\n\r\n        delete(key) {\r\n            const entries = this.__entries__;\r\n            const index = getIndex(entries, key);\r\n\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        }\r\n\r\n        has(key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        }\r\n\r\n        clear() {\r\n            this.__entries__.splice(0);\r\n        }\r\n\r\n        forEach(callback, ctx = null) {\r\n            for (const entry of this.__entries__) {\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        }\r\n    };\r\n})();\r\n","import global from '../shims/global';\r\n\r\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nexport default global.window === global && typeof document != 'undefined';\r\n","/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nexport default (() => {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        return requestAnimationFrame;\r\n    }\r\n\r\n    return callback => setTimeout(() => callback(Date.now()), 1000 / 60);\r\n})();\r\n","import requestAnimationFrame from '../shims/requestAnimationFrame';\r\n\r\n// Defines minimum timeout before adding a trailing call.\r\nconst trailingTimeout = 2;\r\n\r\n/**\r\n * Returns time stamp retrieved either from the \"performance.now\" or from\r\n * the \"Date.now\" method.\r\n *\r\n * @returns {DOMHighResTimeStamp|number}\r\n */\r\nconst timeStamp = (() => {\r\n    let host = Date;\r\n\r\n    if (typeof performance === 'object' && typeof performance.now === 'function') {\r\n        host = performance;\r\n    }\r\n\r\n    return () => host.now();\r\n})();\r\n\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period. It also caches the last\r\n * call and re-invokes it after pending activation is resolved.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @param {boolean} [afterRAF = false] - Whether function needs to be invoked as\r\n *      a requestAnimationFrame callback.\r\n * @returns {Function}\r\n */\r\nexport default function (callback, delay, afterRAF = false) {\r\n    let leadingCall = false,\r\n        trailingCall = false,\r\n        lastCallTime = 0;\r\n\r\n    /**\r\n     * Invokes the original callback function and schedules a new invocation if\r\n     * the wrapper was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function invokeCallback() {\r\n        leadingCall = false;\r\n\r\n        // Invoke original function.\r\n        callback();\r\n\r\n        // Schedule new invocation if there has been a call during delay period.\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback that will be invoked after the specified delay period. It will\r\n     * delegate invocation of the original function to the requestAnimationFrame\r\n     * if \"afterRAF\" parameter is set to \"true\".\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        afterRAF ? requestAnimationFrame(invokeCallback) : invokeCallback();\r\n    }\r\n\r\n    /**\r\n     * Schedules invocation of the initial function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        const callTime = timeStamp();\r\n\r\n        // Postpone activation if there is already a pending call.\r\n        if (leadingCall) {\r\n            // Reject immediately following invocations.\r\n            if (callTime - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n\r\n            trailingCall = true;\r\n        } else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n\r\n            // Schedule new invocation.\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n\r\n        lastCallTime = callTime;\r\n    }\r\n\r\n    return proxy;\r\n}\r\n","import isBrowser from './utils/isBrowser';\r\nimport throttle from './utils/throttle';\r\n\r\n// Define whether the MutationObserver is supported.\r\n// eslint-disable-next-line no-extra-parens\r\nconst mutationsSupported = (\r\n    typeof MutationObserver === 'function' &&\r\n    // MutationObserver should not be used if running in IE11 as it's\r\n    // implementation is unreliable. Example: https://jsfiddle.net/x2r3jpuz/2/\r\n    // Unfortunately, there is no other way to check this issue but to use\r\n    // userAgent's information.\r\n    typeof navigator === 'object' &&\r\n    !(\r\n        navigator.appName === 'Netscape' &&\r\n        navigator.userAgent.match(/Trident\\/.*rv:11/)\r\n    )\r\n);\r\n\r\n// Minimum delay before invoking the update of observers.\r\nconst REFRESH_DELAY = 20;\r\n\r\n// Delay before iteration of the continuous cycle.\r\nconst CONTINUOUS_HANDLER_DELAY = 80;\r\n\r\n/**\r\n * Controller class which handles updates of ResizeObserver instances.\r\n * It decides when and for how long it's necessary to run updates by listening\r\n * to the windows \"resize\" event along with a tracking of DOM mutations\r\n * (nodes removal, changes of attributes, etc.).\r\n *\r\n * Transitions and animations are handled by running a repeatable update cycle\r\n * until the dimensions of observed elements are changing.\r\n *\r\n * Continuous update cycle will be used automatically in case MutationObserver\r\n * is not supported.\r\n */\r\nexport default class ResizeObserverController {\r\n    /**\r\n     * Continuous updates must be enabled if MutationObserver is not supported.\r\n     *\r\n     * @private {boolean}\r\n     */\r\n    isCycleContinuous_ = !mutationsSupported;\r\n\r\n    /**\r\n     * Indicates whether DOM listeners have been added.\r\n     *\r\n     * @private {boolean}\r\n     */\r\n    listenersEnabled_ = false;\r\n\r\n    /**\r\n     * Keeps reference to the instance of MutationObserver.\r\n     *\r\n     * @private {MutationObserver}\r\n     */\r\n    mutationsObserver_;\r\n\r\n    /**\r\n     * A list of connected observers.\r\n     *\r\n     * @private {Array<ResizeObserverSPI>}\r\n     */\r\n    observers_ = [];\r\n\r\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     */\r\n    constructor() {\r\n        // Make sure that the \"refresh\" method is invoked as a RAF callback and\r\n        // that it happens only once during the provided period.\r\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY, true);\r\n\r\n        // Additionally postpone invocation of the continuous updates.\r\n        this.continuousUpdateHandler_ = throttle(this.refresh, CONTINUOUS_HANDLER_DELAY);\r\n    }\r\n\r\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\r\n    connect(observer) {\r\n        if (!this.isConnected(observer)) {\r\n            this.observers_.push(observer);\r\n        }\r\n\r\n        // Add listeners if they haven't been added yet.\r\n        if (!this.listenersEnabled_) {\r\n            this.addListeners_();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\r\n    disconnect(observer) {\r\n        const observers = this.observers_;\r\n        const index = observers.indexOf(observer);\r\n\r\n        // Remove observer if it's present in registry.\r\n        if (~index) {\r\n            observers.splice(index, 1);\r\n        }\r\n\r\n        // Remove listeners if controller has no connected observers.\r\n        if (!observers.length && this.listenersEnabled_) {\r\n            this.removeListeners_();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Tells whether the provided observer is connected to controller.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be checked.\r\n     * @returns {boolean}\r\n     */\r\n    isConnected(observer) {\r\n        return !!~this.observers_.indexOf(observer);\r\n    }\r\n\r\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes or if continuous updates are enabled.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    refresh() {\r\n        const hasChanges = this.updateObservers_();\r\n\r\n        // Continue running updates if changes have been detected as there might\r\n        // be future ones caused by CSS transitions.\r\n        if (hasChanges) {\r\n            this.refresh();\r\n        } else if (this.isCycleContinuous_ && this.listenersEnabled_) {\r\n            // Automatically repeat cycle if it's necessary.\r\n            this.continuousUpdateHandler_();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\r\n    updateObservers_() {\r\n        let hasChanges = false;\r\n\r\n        for (const observer of this.observers_) {\r\n            // Collect active observations.\r\n            observer.gatherActive();\r\n\r\n            // Broadcast active observations and set the flag that changes have\r\n            // been detected.\r\n            if (observer.hasActive()) {\r\n                hasChanges = true;\r\n\r\n                observer.broadcastActive();\r\n            }\r\n        }\r\n\r\n        return hasChanges;\r\n    }\r\n\r\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    addListeners_() {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already added.\r\n        if (!isBrowser || this.listenersEnabled_) {\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('resize', this.refresh);\r\n\r\n        // Subscription to the \"Transitionend\" event is used as a workaround for\r\n        // delayed transitions. This way we can capture at least the final state\r\n        // of an element.\r\n        document.addEventListener('transitionend', this.refresh);\r\n\r\n        // Subscribe to DOM mutations if it's possible as they may lead to\r\n        // changes in the dimensions of elements.\r\n        if (mutationsSupported) {\r\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n\r\n            this.mutationsObserver_.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n\r\n        this.listenersEnabled_ = true;\r\n\r\n        // Don't wait for a possible event that might trigger the update of\r\n        // observers and manually initiate the update process.\r\n        if (this.isCycleContinuous_) {\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    removeListeners_() {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already removed.\r\n        if (!isBrowser || !this.listenersEnabled_) {\r\n            return;\r\n        }\r\n\r\n        window.removeEventListener('resize', this.refresh);\r\n        document.removeEventListener('transitionend', this.refresh);\r\n\r\n        if (this.mutationsObserver_) {\r\n            this.mutationsObserver_.disconnect();\r\n        }\r\n\r\n        this.mutationsObserver_ = null;\r\n        this.listenersEnabled_ = false;\r\n    }\r\n}\r\n","/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nexport default (target, props) => {\r\n    for (const key of Object.keys(props)) {\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerbale: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n\r\n    return target;\r\n};\r\n","import {createRectInit, getContentRect} from './utils/geometry';\r\n\r\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nexport default class ResizeObservation {\r\n    /**\r\n     * Reference to the observed element.\r\n     *\r\n     * @type {Element}\r\n     */\r\n    target;\r\n\r\n    /**\r\n     * Broadcasted width of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\r\n    broadcastWidth = 0;\r\n\r\n    /**\r\n     * Broadcasted height of content rectangle.\r\n     *\r\n     * @type {number}\r\n     */\r\n    broadcastHeight = 0;\r\n\r\n    /**\r\n     * Reference to the last observed content rectangle.\r\n     *\r\n     * @private {DOMRectInit}\r\n     */\r\n    contentRect_ = createRectInit(0, 0, 0, 0);\r\n\r\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\r\n    constructor(target) {\r\n        this.target = target;\r\n    }\r\n\r\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        const rect = getContentRect(this.target);\r\n\r\n        this.contentRect_ = rect;\r\n\r\n        return (\r\n            rect.width !== this.broadcastWidth ||\r\n            rect.height !== this.broadcastHeight\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\r\n    broadcastRect() {\r\n        const rect = this.contentRect_;\r\n\r\n        this.broadcastWidth = rect.width;\r\n        this.broadcastHeight = rect.height;\r\n\r\n        return rect;\r\n    }\r\n}\r\n","import {createReadOnlyRect} from './utils/geometry';\r\nimport defineConfigurable from './utils/defineConfigurable';\r\n\r\nexport default class ResizeObserverEntry {\r\n    /**\r\n     * Element size of which has changed.\r\n     * Spec: https://wicg.github.io/ResizeObserver/#dom-resizeobserverentry-target\r\n     *\r\n     * @readonly\r\n     * @type {Element}\r\n     */\r\n    target;\r\n\r\n    /**\r\n     * Element's content rectangle.\r\n     * Spec: https://wicg.github.io/ResizeObserver/#dom-resizeobserverentry-contentrect\r\n     *\r\n     * @readonly\r\n     * @type {DOMRectReadOnly}\r\n     */\r\n    contentRect;\r\n\r\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\r\n    constructor(target, rectInit) {\r\n        const contentRect = createReadOnlyRect(rectInit);\r\n\r\n        // According to the specification following properties are not writable\r\n        // and are also not enumerable in the native implementation.\r\n        //\r\n        // Property accessors are not being used as they'd require to define a\r\n        // private WeakMap storage which may cause memory leaks in browsers that\r\n        // don't support this type of collections.\r\n        defineConfigurable(this, {target, contentRect});\r\n    }\r\n}\r\n","import {Map} from './shims/es6-collections';\r\nimport ResizeObservation from './ResizeObservation';\r\nimport ResizeObserverEntry from './ResizeObserverEntry';\r\nimport global from './shims/global';\r\n\r\nexport default class ResizeObserverSPI {\r\n    /**\r\n     * Collection of resize observations that have detected changes in dimensions\r\n     * of elements.\r\n     *\r\n     * Spec: https://wicg.github.io/ResizeObserver/#dom-resizeobserver-activetargets\r\n     *\r\n     * @private {Array<ResizeObservation>}\r\n     */\r\n    activeTargets_ = [];\r\n\r\n    /**\r\n     * Reference to the callback function.\r\n     * Spec: https://wicg.github.io/ResizeObserver/#resize-observer-callback\r\n     *\r\n     * @private {ResizeObserverCallback}\r\n     */\r\n    callback_;\r\n\r\n    /**\r\n     * Public ResizeObserver instance which will be passed to the callback\r\n     * function and used as a value of it's \"this\" binding.\r\n     *\r\n     * @private {ResizeObserver}\r\n     */\r\n    callbackCtx_;\r\n\r\n    /**\r\n     * Reference to the associated ResizeObserverController.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\r\n    controller_;\r\n\r\n    /**\r\n     * Registry of the ResizeObservation instances.\r\n     * Spec: https://wicg.github.io/ResizeObserver/#dom-resizeobserver-observationtargets\r\n     *\r\n     * @private {Map<Element, ResizeObservation>}\r\n     */\r\n    observationTargets_ = new Map();\r\n\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\r\n    constructor(callback, controller, callbackCtx) {\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n        }\r\n\r\n        this.callback_ = callback;\r\n        this.controller_ = controller;\r\n        this.callbackCtx_ = callbackCtx;\r\n    }\r\n\r\n    /**\r\n     * Starts observing provided element.\r\n     * Spec: https://wicg.github.io/ResizeObserver/#dom-resizeobserver-observe\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\r\n    observe(target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (!('Element' in global) || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n\r\n        if (!(target instanceof Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n\r\n        const targets = this.observationTargets_;\r\n\r\n        // Do nothing if element is already being observed.\r\n        if (targets.has(target)) {\r\n            return;\r\n        }\r\n\r\n        // Register new ResizeObservation instance.\r\n        targets.set(target, new ResizeObservation(target));\r\n\r\n        // Add observer to controller if it hasn't been connected yet.\r\n        if (!this.controller_.isConnected(this)) {\r\n            this.controller_.connect(this);\r\n        }\r\n\r\n        // Force the update of observations.\r\n        this.controller_.refresh();\r\n    }\r\n\r\n    /**\r\n     * Stops observing provided element.\r\n     * Spec: https://wicg.github.io/ResizeObserver/#dom-resizeobserver-unobserve\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\r\n    unobserve(target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (!('Element' in global) || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n\r\n        if (!(target instanceof Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n\r\n        const targets = this.observationTargets_;\r\n\r\n        // Do nothing if element is not being observed.\r\n        if (!targets.has(target)) {\r\n            return;\r\n        }\r\n\r\n        // Remove element and associated with it ResizeObsrvation instance from\r\n        // registry.\r\n        targets.delete(target);\r\n\r\n        // Set back the initial state if there is nothing to observe.\r\n        if (!targets.size) {\r\n            this.disconnect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops observing all elements and clears the observations list.\r\n     * Spec: https://wicg.github.io/ResizeObserver/#dom-resizeobserver-disconnect\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disconnect() {\r\n        this.clearActive();\r\n        this.observationTargets_.clear();\r\n        this.controller_.disconnect(this);\r\n    }\r\n\r\n    /**\r\n     * Clears an array of previously collected active observations and collects\r\n     * observation instances which associated element has changed it's content\r\n     * rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    gatherActive() {\r\n        this.clearActive();\r\n\r\n        const activeTargets = this.activeTargets_;\r\n\r\n        this.observationTargets_.forEach(observation => {\r\n            if (observation.isActive()) {\r\n                activeTargets.push(observation);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    broadcastActive() {\r\n        // Do nothing if observer doesn't have active observations.\r\n        if (!this.hasActive()) {\r\n            return;\r\n        }\r\n\r\n        const ctx = this.callbackCtx_;\r\n\r\n        // Create ResizeObserverEntry instance for every active observation.\r\n        const entries = this.activeTargets_.map(observation => {\r\n            return new ResizeObserverEntry(\r\n                observation.target,\r\n                observation.broadcastRect()\r\n            );\r\n        });\r\n\r\n        this.callback_.call(ctx, entries, ctx);\r\n        this.clearActive();\r\n    }\r\n\r\n    /**\r\n     * Clears the collection of pending/active observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    clearActive() {\r\n        this.activeTargets_.splice(0);\r\n    }\r\n\r\n    /**\r\n     * Tells whether observer has pending observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    hasActive() {\r\n        return !!this.activeTargets_.length;\r\n    }\r\n}\r\n","import {Map} from './shims/es6-collections';\r\nimport ResizeObserverController from './ResizeObserverController';\r\nimport ResizeObserverSPI from './ResizeObserverSPI';\r\n\r\n// Controller that will be assigned to all instances of the ResizeObserver.\r\nconst controller = new ResizeObserverController();\r\n\r\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// of the Map collection as the former one can't be polyfilled anyway.\r\nconst observers = typeof WeakMap === 'function' ? new WeakMap() : new Map();\r\n\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * providing only those methods properties that are define in the spec.\r\n */\r\nclass ResizeObserver {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when dimensions of\r\n     *      the observed elements change.\r\n     */\r\n    constructor(callback) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n\r\n        // Create a new instance of an internal ResizeObserver.\r\n        const observer = new ResizeObserverSPI(callback, controller, this);\r\n\r\n        // Register internal observer.\r\n        observers.set(this, observer);\r\n    }\r\n}\r\n\r\n// Expose public methods of ResizeObserver.\r\n[\r\n    'observe',\r\n    'unobserve',\r\n    'disconnect'\r\n].forEach(method => {\r\n    ResizeObserver.prototype[method] = function () {\r\n        return observers.get(this)[method](...arguments);\r\n    };\r\n});\r\n\r\nexport default ResizeObserver;\r\n","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support AMD\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support CommonJS\n  } else if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        // Since we're generating multiple colors,\n        // incremement the seed. Otherwise we'd just\n        // generate the same color each time...\n        if (seed && options.seed) options.seed += 1;\n\n        colors.push(randomColor(options));\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue (options) {\n\n    var hueRange = getHueRange(options.hue),\n        hue = randomWithin(hueRange);\n\n    // Instead of storing red as two seperate ranges,\n    // we group them, using negative numbers\n    if (hue < 0) {hue = 360 + hue;}\n\n    return hue;\n\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + Math.random() + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        return 'rgba(' + rgbColor.join(', ') + ', ' + Math.random() + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      return Math.floor(range[0] + Math.random()*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n    }\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [19,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [47,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [63,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [179, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [258, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [283, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  return randomColor;\n}));\n"],"names":["toFloat","value","parseFloat","getBordersSize","styles","positions","reduce","size","pos","getPaddings","boxKeys","paddings","const","key","getSVGContentRect","target","bbox","getBBox","createRectInit","width","height","getHTMLElementContentRect","clientWidth","clientHeight","emptyRect","getComputedStyle","horizPad","left","right","vertPad","top","bottom","boxSizing","Math","round","isDocumentElement","vertScrollbar","horizScrollbar","abs","document","documentElement","getContentRect","isBrowser","isSVGGraphicsElement","createReadOnlyRect","ref","x","y","Constr","DOMRectReadOnly","Object","rect","create","prototype","getRandomInt","min","max","floor","random","updateColorData","hue","hues","generateColor","randomColor","colorData","toArray","collection","Array","slice","call","generateElements","container","levels","items","index","className","block","createElement","innerHTML","style","backgroundColor","appendChild","populateQueue","blocks","resolveNextItem","queue","shift","maxWidth","minHeight","indexOf","global","self","window","Function","Map","getIndex","arr","result","some","entry","__entries__","this","length","push","entries","splice","callback","ctx","requestAnimationFrame","setTimeout","Date","now","trailingTimeout","timeStamp","host","performance","delay","afterRAF","invokeCallback","trailingCall","timeoutCallback","proxy","callTime","leadingCall","lastCallTime","mutationsSupported","MutationObserver","navigator","appName","userAgent","match","REFRESH_DELAY","CONTINUOUS_HANDLER_DELAY","ResizeObserverController","isCycleContinuous_","listenersEnabled_","observers_","refresh","throttle","bind","continuousUpdateHandler_","connect","observer","isConnected","addListeners_","disconnect","observers","removeListeners_","hasChanges","updateObservers_","gatherActive","hasActive","broadcastActive","addEventListener","mutationsObserver_","observe","removeEventListener","props","keys","defineProperty","SVGGraphicsElement","SVGElement","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","broadcastRect","ResizeObserverEntry","rectInit","contentRect","ResizeObserverSPI","controller","callbackCtx","activeTargets_","observationTargets_","TypeError","callback_","controller_","callbackCtx_","arguments","Element","targets","has","set","unobserve","delete","clearActive","clear","activeTargets","forEach","observation","map","WeakMap","ResizeObserver","method","get","root","factory","module","exports","pickHue","options","hueRange","getHueRange","randomWithin","pickSaturation","luminosity","saturationRange","getSaturationRange","sMin","sMax","pickBrightness","H","S","bMin","getMinimumBrightness","bMax","setFormat","hsv","format","HSVtoHSL","hsl","hslColor","HSVtoRGB","rgb","join","rgbColor","HSVtoHex","lowerBounds","getColorInfo","i","s1","v1","s2","v2","m","b","colorInput","parseInt","number","colorDictionary","color","colorName","range","seed","rnd","componentToHex","c","hex","toString","defineColor","name","loadColorBounds","h","s","v","h_i","f","p","q","t","r","g","k","stringToInteger","string","total","Number","MAX_SAFE_INTEGER","charCodeAt","undefined","B","count","totalColors","colors","dimensionsStr","toFixed","firstElementChild","textContent","getElementById","querySelectorAll","leaf"],"mappings":"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"}